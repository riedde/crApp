<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2022-09-20T15:36:23Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns uri="http://baumann-digital.de/ns/criticalApparatus" prefix="crapp"/>
   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->
   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:is-value-in-sequence"
                as="xs:boolean">
         <param name="value" as="xs:anyAtomicType?"/>
         <param name="seq" as="xs:anyAtomicType*"/>
         <sequence select="$value = $seq"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform" name="crapp:checkValues">
         <param name="elem" as="node()"/>
         <param name="attName" as="xs:string"/>
         <variable name="elemName" select="local-name($elem)"/>
         <variable name="elemText" select="$elem/text()"/>
         <variable name="setVals"
                   select="$elem/ancestor::crapp:apparatus//crapp:setting//node()[local-name()=$elemName]"/>
         <value-of select="functx:is-value-in-sequence($elemText, if($setVals/attribute::node()[local-name()=$attName])then($setVals/attribute::node()[local-name()=$attName]) else($setVals/text()))"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform" name="crapp:valuesAllowed">
         <param name="elem" as="node()"/>
         <param name="attName" as="xs:string"/>
         <variable name="elemName" select="local-name($elem)"/>
         <variable name="elemText" select="$elem/text()"/>
         <variable name="setVals"
                   select="$elem/ancestor::crapp:apparatus//crapp:setting//node()[local-name()=$elemName]"/>
         <for-each select="$setVals">
            <value-of select="if(attribute::node()[local-name()=$attName]) then(attribute::node()[local-name()=$attName]/string()) else(text())"/>
         </for-each>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="crapp:valuesAllowedJoined">
         <param name="elem" as="node()"/>
         <param name="attName" as="xs:string"/>
         <value-of select="string-join(crapp:valuesAllowed($elem, $attName), ', ')"/>
      </function>
      <pattern abstract="true" id="checkValues">
         <rule context="crapp:remark//node()[local-name()='$elementName']">
            <assert test="exists(ancestor::crapp:apparatus/crapp:setting//node()[local-name()='$elementName'])"
                    role="fatal">No setting for <value-of select="local-name(.)"/> defined. Please define the setting before use.</assert>
            <report test="exists(ancestor::crapp:apparatus/crapp:setting//node()[local-name()='$elementName']) and crapp:checkValues(., '$attrStr') = false()"
                    role="error">The value <value-of select="."/> is not allowed here. Please use one of these: <value-of select="crapp:valuesAllowedJoined(., '$attrStr')"/>.</report>
         </rule>
      </pattern>
   </schema>
   <pattern id="schematron-constraint-crApp-check-voice-combination-2">
      <rule context="crapp:remark//crapp:voice">
         <let name="voiceVal" value="./text()"/>
         <let name="voiceGrpVals"
              value="string-join(ancestor::crapp:remark//crapp:voiceGrp/text(),' ')"/>
         <report test=".[ancestor::crapp:apparatus/crapp:setting//crapp:voice[@key = $voiceVal]/ancestor::crapp:voiceGrp[@key][contains($voiceGrpVals, @key)]]"
                 role="warning">
            <value-of select="$voiceVal"/> is part of <value-of select="tokenize($voiceGrpVals, ' ')[last()]"/>. A second call might be redundant.</report>
      </rule>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="class"/>
      <param name="attrStr" value="key"/>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="mdiv"/>
      <param name="attrStr" value="no"/>
   </pattern>
   <pattern>
      <rule context="crapp:remark">
         <assert test="count(crapp:mdiv) = 1" role="info">Please note there is more then one occurance of mdiv.</assert>
      </rule>
   </pattern>
   <pattern>
      <rule context="crapp:position">
         <report test="if(count(parent::node()/crapp:position) = 1) then(self::node()[@type])else(false())">If there is only one position @type is not allowed.</report>
         <assert test="if(count(parent::node()/crapp:position) = 2) then(parent::node()/crapp:position[1]/@type='start')else(true())">The value of @type in the first position must be 'start'</assert>
         <assert test="if(count(parent::node()/crapp:position) = 2) then(parent::node()/crapp:position[2]/@type='stop')else(true())">The value of @type in the second position must be 'stop'</assert>
      </rule>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="voiceGrp"/>
      <param name="attrStr" value="key"/>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="voice"/>
      <param name="attrStr" value="key"/>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="layer"/>
      <param name="attrStr" value="key"/>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="source"/>
      <param name="attrStr" value="siglum"/>
   </pattern>
   <pattern is-a="checkValues">
      <param name="elementName" value="edition"/>
      <param name="attrStr" value="siglum"/>
   </pattern>
</schema>
