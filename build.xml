<?xml version="1.0" encoding="UTF-8"?>
<project default="crApp" name="crApp" basedir="." xmlns:unless="ant:unless">
    <dirname property="crApp.basedir" file="${ant.file.crApp}"/>
    
    <!-- import default properties from file -->
    <property file="${crApp.basedir}/local.build.properties"/>
    <property file="${crApp.basedir}/build.properties"/>
    
    <condition property="lang" value="${lang}" else="de">
        <isset property="lang"/>
    </condition>
    
    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${compiled.dir}" type="dir"/>
        </condition>
    </target>
    
    <target name="init" depends="dir.check" unless="dir.exists">
        <mkdir dir="${compiled.dir}"/>
    </target>
    
    <target name="clean">
        <delete>
            <fileset dir="schema/en">
                <include name="*.isosch"/>
            </fileset>
            <fileset dir="schema/de">
                <include name="*.isosch"/>
            </fileset>
        </delete>
    </target>
    
    <target name="crApp" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${crApp.basedir}/resources/schema/guidelines/crApp-guidelines.odd"/>
            <param name="outputFileRNG" value="${compiled.dir}/crApp.rng"/>
            <param name="outputFileSchematron" value="${compiled.dir}/crApp.isosch"/>
            <param name="selectedSchema" value="crApp"/>
        </antcall>
        <property name="schema.outputFileRNG" value="${compiled.dir}/crApp.rng"/>
        <property name="schema.name" value="crApp"/>
        <antcall target="check-rng-output"/>
    </target>
    
    <!-- processing schema -->
    <target name="process">
        <basename property="inputFile.basename" file="${inputFile}" suffix=".odd"/>
        <!-- TEI is considered default source -->
        <condition property="source" value="${source}" else="${tei.source}">
            <isset property="source"/>
        </condition>
        <sequential>
            <echo>Expanding ODD file</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2odd.xsl" 
                in="${inputFile}" out="${compiled.dir}/${inputFile.basename}.compiled.xml">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Generate html guidelines</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2html.xsl" 
                in="${compiled.dir}/${inputFile.basename}.compiled.xml" out="${compiled.dir}/${inputFile.basename}.html">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Creating RelaxNG schema</echo>
            <xslt force="yes" style="${stylesheets.dir}/profiles/default/relaxng/to.xsl" 
                in="${compiled.dir}/${inputFile.basename}.compiled.xml" out="${outputFileRNG}">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="inputDir" expression="${crApp.basedir}/"/>
                <!-- supply name of language-->
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="doclang" expression="${lang}" if="lang"/>
                <param name="documentationLanguage" expression="${lang}" if="lang"/>
                <!-- emit some diagnostics"-->
                <param name="debug" expression="${debug}" if="debug"/>
                <!-- be verbose-->
                <param name="verbose" expression="${verbose}" if="verbose"/>
            </xslt>
            
            <echo>Extracting Schematron rules</echo>
            <xslt processor="trax" force="yes" 
                style="${stylesheets.dir}/profiles/default/schematron/to.xsl" 
                in="${compiled.dir}/${inputFile.basename}.compiled.xml" out="${outputFileSchematron}">
                <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            </xslt>
        </sequential>
    </target>
    
    <target name="check-rng-output">
        <echo>Test if relaxNG is valid.</echo>
        <taskdef name="jing" classpath="${crApp.basedir}/resources/test/jing.jar" classname="com.thaiopensource.relaxng.util.JingTask"/>
        <sequential>
            <echo level="info">Validating RelaxNG output file with RelaxNG.</echo>
            <jing rngfile="${crApp.basedir}/resources/test/relaxng.rng" file="${schema.outputFileRNG}"/>
        </sequential>
    </target>
</project>
