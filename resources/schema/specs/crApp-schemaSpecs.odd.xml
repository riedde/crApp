<?xml version="1.0" encoding="UTF-8"?>
<!--<?xml-model href="https://jenkins.tei-c.org/job/TEIP5-dev/lastStableBuild/artifact/P5/release/xml/tei/odd/p5.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>-->
<schemaSpec ident="crApp" xml:lang="en" start="apparatus" xmlns="http://www.tei-c.org/ns/1.0" ns="http://baumann-digital.de/ns/criticalApparatus" xmlns:mei="http://www.music-encoding.org/ns/mei" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:crapp="http://baumann-digital.de/ns/criticalApparatus" xmlns:functx="http://www.functx.com">
  <classSpec type="atts" ident="att.key">
    <desc xml:lang="en" versionDate="2022-04-01">A class for key like attributes.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Klasse für Attribute, die Schlüssel angeben.</desc>
    <attList>
      <attDef ident="key">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute that gives a Key as a pointer to a resource.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, das einen Schlüssel (Key) angibt, der auf eine bestimmte Ressource verweist.</desc>
        <datatype>
          <dataRef key="text"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.id">
    <desc xml:lang="en" versionDate="2022-04-01">A class for id like attributes.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Klasse für ID-ähnliche Attribute.</desc>
    <attList>
      <attDef ident="xml:id">
        <desc xml:lang="en" versionDate="2022-04-01">ID of the file. Must be unique in the context of this framework.</desc>
        <datatype>
          <dataRef key="ID"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.numbering">
    <desc xml:lang="en" versionDate="2022-04-01">A class for attributes that are used for numbering or counting.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Klasse für Attribute, die zur Nummerierung oder zum Zählen verwendet werden.</desc>
    <attList>
      <attDef ident="no">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute for a numbering. The value must be an integer.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut zur Nummerierung. Der Wert muss eine Zahl sein.</desc>
        <datatype>
          <dataRef key="integer"/>
        </datatype>
      </attDef>
      <attDef ident="sortNo">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute for ordering purpose. The value must be a positive integer.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, das für Sortierungsbelange verwendet wird. Der Wert muss eine positive Zahl sein.</desc>
        <datatype>
          <dataRef key="integer"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.timing">
    <desc xml:lang="en" versionDate="2022-04-01">An attribute class for timing concerns.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Klasse für Attribute, die zeitliche Einordnungen betreffen.</desc>
    <attList>
      <attDef ident="measure">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute for defining a measure as a (part of a) time stamp. The value must be a positive integer.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut mit dem ein Takt als (Teil eines) Zeitstempel(s) angegeben werden kann. Der Wert muss eine positive Zahl sein.</desc>
        <datatype>
          <dataRef key="integer"/>
        </datatype>
      </attDef>
      <attDef ident="count">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute for defining a count (within a measure) as detailed part of a time stamp. The value must be a positive integer.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut um eine Zählzeit (in einem Takt) anzugeben, als Teil einer Positionsagabe. Der Wert muss iene positive Zahl sein.</desc>
        <datatype>
          <dataRef key="integer"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.siglum">
    <desc xml:lang="en" versionDate="2022-04-01">An attribute class for classifying using an abbreviation (e.g., a siglum).</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Attributklasse zur Klassifizierung mittels einer Abkürzung (z.B. durch ein Siglum).</desc>
    <attList>
      <attDef ident="siglum">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute containing a text value to classify a source using an abbreviation (siglum).</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, das einen Text-Wert enthält, um eine Quelle mittels einer Abkürzung (Siglum) zu klassifizieren.</desc>
        <datatype>
          <dataRef key="text"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.label">
    <desc xml:lang="en" versionDate="2022-04-01">A class for labelling attributes.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Ein Klasse für Beschriftungs-Attribute.</desc>
    <attList>
      <attDef ident="label">
        <desc xml:lang="en" versionDate="2022-04-19">An attribute for labelling an element in any way.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, um Elemente zu Beschriften.</desc>
        <datatype>
          <dataRef key="text"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  <classSpec type="atts" ident="att.target">
    <desc xml:lang="en" versionDate="2022-04-01">A class for attributes to defining targets.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Eine Klasse für Attribute, die Ziele definieren.</desc>
    <attList>
      <attDef ident="target">
        <desc xml:lang="en" versionDate="2022-04-01">An attribute for defining an explicit target to an other destination. The value must be an URI.</desc>
        <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, um ein (externes) Ziel (Dokument) explizit anzugeben. Als Wert ist eine URI erforderlich.</desc>
        <datatype>
          <dataRef key="URI"/>
        </datatype>
      </attDef>
    </attList>
  </classSpec>
  
  <constraintSpec ident="setting-check-text-values" scheme="schematron">
    <desc xml:lang="en" versionDate="2022-04-01">This constraint checks if the called values are defined somewhere in the <gi>setting</gi> element.</desc>
    <constraint>
      <sch:schema xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2">
        <sch:ns uri="http://baumann-digital.de/ns/criticalApparatus" prefix="crapp"/>
        <xsl:function name="functx:is-value-in-sequence" as="xs:boolean">
          <xsl:param name="value" as="xs:anyAtomicType?"/>
          <xsl:param name="seq" as="xs:anyAtomicType*"/>
          <xsl:sequence select="$value = $seq"/>
        </xsl:function>
        <xsl:function name="crapp:checkValues">
          <xsl:param name="elem" as="node()"/>
          <xsl:param name="attName" as="xs:string"/>
          <xsl:variable name="elemName" select="local-name($elem)"/>
          <xsl:variable name="elemText" select="$elem/text()"/>
          <xsl:variable name="setVals" select="$elem/ancestor::crapp:apparatus//crapp:setting//node()[local-name()=$elemName]"/>
          <xsl:value-of select="functx:is-value-in-sequence($elemText, if($setVals/attribute::node()[local-name()=$attName])then($setVals/attribute::node()[local-name()=$attName]) else($setVals/text()))"/>
        </xsl:function>
        <xsl:function name="crapp:valuesAllowed">
          <xsl:param name="elem" as="node()"/>
          <xsl:param name="attName" as="xs:string"/>
          <xsl:variable name="elemName" select="local-name($elem)"/>
          <xsl:variable name="elemText" select="$elem/text()"/>
          <xsl:variable name="setVals" select="$elem/ancestor::crapp:apparatus//crapp:setting//node()[local-name()=$elemName]"/>
          <xsl:for-each select="$setVals">
            <xsl:value-of select="if(attribute::node()[local-name()=$attName]) then(attribute::node()[local-name()=$attName]/string()) else(text())"/>
          </xsl:for-each>
        </xsl:function>
        <xsl:function name="crapp:valuesAllowedJoined">
          <xsl:param name="elem" as="node()"/>
          <xsl:param name="attName" as="xs:string"/>
          <xsl:value-of select="string-join(crapp:valuesAllowed($elem, $attName), ', ')"/>
        </xsl:function>
        <sch:pattern abstract="true" id="checkValues">
          <sch:rule context="crapp:remark//node()[local-name()='$elementName']">
            <sch:assert test="exists(ancestor::crapp:apparatus/crapp:setting//node()[local-name()='$elementName'])" role="fatal">No setting for <sch:value-of select="local-name(.)"/> defined. Please define the setting before use.</sch:assert>
            <sch:report test="exists(ancestor::crapp:apparatus/crapp:setting//node()[local-name()='$elementName']) and crapp:checkValues(., '$attrStr') = false()" role="error">The value <sch:value-of select="."/> is not allowed here. Please use one of these: <sch:value-of select="crapp:valuesAllowedJoined(., '$attrStr')"/>.</sch:report>
          </sch:rule>
        </sch:pattern>
      </sch:schema>
    </constraint>
  </constraintSpec>
  <constraintSpec ident="check-voice-combination" scheme="schematron">
    <desc xml:lang="en" versionDate="2022-04-01">This constraint checks if the called voices inside a remark are redundant, e.g., if the parent or ancestor group is also called.</desc>
    <constraint>
      <sch:rule context="crapp:remark//crapp:voice">
        <sch:let name="voiceVal" value="./text()"/>
        <sch:let name="voiceGrpVals" value="string-join(ancestor::crapp:remark//crapp:voiceGrp/text(),' ')"/>
        <sch:report test=".[ancestor::crapp:apparatus/crapp:setting//crapp:voice[@key = $voiceVal]/ancestor::crapp:voiceGrp[@key][contains($voiceGrpVals, @key)]]" role="warning"><sch:value-of select="$voiceVal"/> is part of <sch:value-of select="tokenize($voiceGrpVals, ' ')[last()]"/>. A second call might be redundant.</sch:report>
      </sch:rule>
    </constraint>
  </constraintSpec>
  
  <elementSpec ident="apparatus" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">The root element for the critical apparatus.</desc>
    <desc xml:lang="en" versionDate="2022-04-19">Das Wurzelelement des Kritischen Apparates.</desc>
    <classes>
      <memberOf key="att.id"/>
    </classes>
    <content>
      <elementRef key="setting" minOccurs="1" maxOccurs="1"/>
      <elementRef key="remarks" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="setting" module="setting">
    <desc xml:lang="en" versionDate="2022-04-19">Basic information, e.g., relates Sources, Instrumentation/Voices, Editions.</desc>
    <desc xml:lang="de" versionDate="2022-04-01">Die Grundinformationen, bspw. zugehörige Quellen, Instrumente/Stimmen, Editionen.</desc>
    <content>
      <elementRef key="editors"/>
      <elementRef key="mdivs"/>
      <elementRef key="voices"/>
      <elementRef key="relWorks"/>
      <elementRef key="relSources"/>
      <elementRef key="relEditions"/>
      <elementRef key="classifications"/>
    </content>
  </elementSpec>
  <elementSpec ident="editors" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A wrapper for <gi>editor</gi> elements.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Ein Wrapper für <gi>editor</gi> Elemente.</desc>
    <content>
      <elementRef key="editor" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="editor" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">An element that defines an editor responsible for the content.</desc>
    <classes>
      <memberOf key="att.key"/>
    </classes>
    <content>
      <textNode/>
    </content>
  </elementSpec>
  <elementSpec ident="remarks" module="remark">
    <desc xml:lang="en" versionDate="2022-04-01">A wrapper for critical <gi>remark</gi> elements.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Ein Wrapper für <gi>remark</gi> Elemente.</desc>
    <content>
      <elementRef key="remark" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="remark" module="remark">
    <desc xml:lang="en" versionDate="2022-04-01">A critical remark.</desc>
    <desc xml:lang="de" versionDate="2022-04-19">Ein kritische Anmerkung.</desc>
    <classes>
      <memberOf key="att.id"/>
    </classes>
    <content>
      <elementRef key="class" minOccurs="0" maxOccurs="unbounded"/>
      <elementRef key="mdiv" minOccurs="0" maxOccurs="unbounded"/>
      <elementRef key="occurances" minOccurs="0" maxOccurs="1"/>
      <elementRef key="voices" maxOccurs="1"/>
      <!--            <elementRef key="layers" maxOccurs="1"/>-->
      <elementRef key="annots" minOccurs="1"/>
      <elementRef key="sources" maxOccurs="1"/>
      <elementRef key="editions" maxOccurs="1"/>
    </content>
    <attList>
      <attDef ident="type">
        <valList type="closed">
          <valItem ident="editorial">
            <desc xml:lang="en" versionDate="2022-04-19">Intervention (ed.)</desc>
            <desc xml:lang="de" versionDate="2022-04-01">Eingriff (Hg.)</desc>
          </valItem>
          <valItem ident="reading">
            <desc xml:lang="en" versionDate="2022-04-19">Reading</desc>
            <desc xml:lang="de" versionDate="2022-04-01">Lesart</desc>
          </valItem>
          <valItem ident="annotation">
            <desc xml:lang="en" versionDate="2022-04-19">Annotation (ed.)</desc>
            <desc xml:lang="de" versionDate="2022-04-01">Anmerkung (Hg.)</desc>
          </valItem>
        </valList>
      </attDef>
    </attList>
    <exemplum xml:lang="en">
      <egXML xmlns="http://www.tei-c.org/ns/Examples" source="crApp-template.xml">
        <remark>
          <class>dynamic</class>
          <mdiv>1</mdiv>
          <occurances>
            <occurance>
              <position/>
              <position type="start" measure="1" count="1"/>
              <position type="stop" measure="2" count="3"/>
            </occurance>
          </occurances>
          <voices>
            <voice>flute.1</voice>
            <voice>oboe.1</voice>
          </voices>
          <annots>
            <annot>No dynamics.</annot>
          </annots>
          <sources>
            <source>SV</source>
          </sources>
          <editions>
            <edition>BauA</edition>
          </editions>
        </remark>
      </egXML>
    </exemplum>
  </elementSpec>
  <elementSpec ident="classifications" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A wrapper to organize classifications.</desc>
    <content>
      <elementRef key="classGrp" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="classGrp" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for grouping classes.</desc>
    <classes>
      <memberOf key="att.label"/>
    </classes>
    <content>
      <elementRef key="class" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="class" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">An Element that defines a class or category to be used for classifying.</desc>
    <classes>
      <memberOf key="att.key"/>
    </classes>
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-source" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="class"/>
          <sch:param name="attrStr" value="key"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="mdivs" module="setting">
    <content>
      <elementRef key="mdiv" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="mdiv" module="setting">
    <classes>
      <memberOf key="att.numbering"/>
    </classes>
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-mdiv" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="mdiv"/>
          <sch:param name="attrStr" value="no"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="range-type-vals" scheme="schematron">
      <constraint>
        <sch:pattern>
          <sch:rule context="crapp:remark">
            <sch:assert test="count(crapp:mdiv) = 1" role="info">Please note there is more then one occurance of mdiv.</sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="occurances" module="remark">
    <content>
      <elementRef key="occurance" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="occurance" module="remark">
    <content>
      <alternate>
        <elementRef key="position" minOccurs="1" maxOccurs="2"/>
      </alternate>
    </content>
  </elementSpec>
  <elementSpec ident="position" module="remark">
    <classes>
      <memberOf key="att.timing"/>
    </classes>
    <constraintSpec ident="range-type-vals" scheme="schematron">
      <constraint>
        <sch:pattern>
          <sch:rule context="crapp:position">
            <sch:report test="if(count(parent::node()/crapp:position) = 1) then(self::node()[@type])else(false())">If there is only one position @type is not allowed.</sch:report>
            <sch:assert test="if(count(parent::node()/crapp:position) = 2) then(parent::node()/crapp:position[1]/@type='start')else(true())">The value of @type in the first position must be 'start'</sch:assert>
            <sch:assert test="if(count(parent::node()/crapp:position) = 2) then(parent::node()/crapp:position[2]/@type='stop')else(true())">The value of @type in the second position must be 'stop'</sch:assert>
          </sch:rule>
        </sch:pattern>
      </constraint>
    </constraintSpec>
    <attList>
      <attDef ident="type" usage="opt">
        <valList type="closed">
          <valItem ident="start">
            <gloss xml:lang="en">starting point</gloss>
            <desc xml:lang="en" versionDate="2022-04-01">The location where the range of the occurance starts.</desc>
          </valItem>
          <valItem ident="stop">
            <gloss xml:lang="en">stopping point</gloss>
            <desc xml:lang="en" versionDate="2022-04-01">The location where the range of the occurance stops.</desc>
          </valItem>
        </valList>
      </attDef>
    </attList>
  </elementSpec>
  <elementSpec ident="voices" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for voices (voice-elements)</desc>
    <content>
      <sequence preserveOrder="false" maxOccurs="unbounded">
        <elementRef key="voiceGrp" minOccurs="0" maxOccurs="unbounded"/>
        <elementRef key="voice" minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
    </content>
  </elementSpec>
  <elementSpec ident="voiceGrp" module="setting">
    <classes>
      <memberOf key="att.key"/>
    </classes>
    <content>
      <alternate>
        <sequence preserveOrder="false" maxOccurs="unbounded">
          <elementRef key="voiceGrp" minOccurs="0" maxOccurs="unbounded"/>
          <elementRef key="voice" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <textNode/>
      </alternate>
    </content>
    <constraintSpec ident="check-values-voiceGrp" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="voiceGrp"/>
          <sch:param name="attrStr" value="key"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="voice" module="setting">
    <classes>
      <memberOf key="att.key"/>
    </classes>
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-voice" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="voice"/>
          <sch:param name="attrStr" value="key"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="layers" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for layers (layer-elements)</desc>
    <content>
      <elementRef key="layer" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="layer" module="setting">
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-layer" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="layer"/>
          <sch:param name="attrStr" value="key"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="annots" module="remark">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for annotations (annot-elements)</desc>
    <content>
      <elementRef key="annot" minOccurs="1" maxOccurs="unbounded"/>
      <!-- source="../../MusicEncoding/music-encoding/source/modules/MEI.shared.xml" -->
    </content>
  </elementSpec>
  <elementSpec ident="annot" module="remark">
    <content>
      <!--            <alternate>-->
      <textNode/>
      <!--<sequence preserveOrder="false">
                <textNode/>
                <elementRef key="app"/>
                <textNode/>
              </sequence>-->
      <!--</alternate>-->
    </content>
    <attList>
      <attDef ident="resp">
          <desc xml:lang="en" versionDate="2022-04-01">An attribute that gives a key of a person that is responsible for the content.</desc>
          <desc xml:lang="de" versionDate="2022-04-19">Ein Attribut, das den Schlüssel (Key) einer Person angibt, die für den Inhalt verantwortlich ist.</desc>
          <datatype>
            <dataRef key="text"/>
          </datatype>
      </attDef>
    </attList>
  </elementSpec>
  <elementSpec ident="relSources" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for sources related to the critical apparatus</desc>
    <content>
      <elementRef key="source" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="sources" module="remark">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for sources (source-elements)</desc>
    <content>
      <elementRef key="source" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="source" module="setting">
    <classes>
      <memberOf key="att.key"/>
      <memberOf key="att.numbering"/>
      <memberOf key="att.siglum"/>
      <memberOf key="att.target"/>
    </classes>
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-source" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="source"/>
          <sch:param name="attrStr" value="siglum"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="relEditions" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for editions related to the critical apparatus</desc>
    <content>
      <elementRef key="edition" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="editions" module="remark">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for editions (edition-elements)</desc>
    <content>
      <elementRef key="edition" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="edition" module="setting">
    <classes>
      <memberOf key="att.key"/>
      <memberOf key="att.numbering"/>
      <memberOf key="att.siglum"/>
      <memberOf key="att.target"/>
    </classes>
    <content>
      <textNode/>
    </content>
    <constraintSpec ident="check-values-edition" scheme="schematron">
      <constraint>
        <sch:pattern is-a="checkValues">
          <sch:param name="elementName" value="edition"/>
          <sch:param name="attrStr" value="siglum"/>
        </sch:pattern>
      </constraint>
    </constraintSpec>
  </elementSpec>
  <elementSpec ident="relWorks" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A Wrapper for sources related to the critical apparatus</desc>
    <content>
      <elementRef key="work" minOccurs="1" maxOccurs="unbounded"/>
    </content>
  </elementSpec>
  <elementSpec ident="work" module="setting">
    <desc xml:lang="en" versionDate="2022-04-01">A reference to a work this critical apparatus is made for.</desc>
    <classes>
      <memberOf key="att.target"/>
      <memberOf key="att.key"/>
    </classes>
    <content>
      <textNode/>
    </content>
  </elementSpec>
</schemaSpec>
