<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:crapp="http://baumann-digital.de/ns/crApp" xmlns:functx="http://www.functx.com" xmlns:mei="http://www.music-encoding.org/ns/mei" xmlns:rng="http://relaxng.org/ns/structure/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Schema definition (ODD) for the critical apparatus (crApp) of Baumann-Digital (BauDi)</title>
        <author>Dennis Ried</author>
      </titleStmt>
      <publicationStmt>
        <publisher>This file is part of the PhD thesis of Dennis Ried. <address>
            <addrLine>Weimarer Straße 27</addrLine>
            <addrLine>67165 Waldsee</addrLine>
            <addrLine>Germany</addrLine>
          </address>
          <email>ried-musikforschung@mail.de</email>
        </publisher>
        <availability status="restricted">
          <p>This work is licensed under a <ref type="license" target="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License (CC BY 4.0)</ref>.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Born digital data model.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <include xmlns="http://www.w3.org/2001/XInclude" href="docs/crApp-preamble.xml"/>
      <include xmlns="http://www.w3.org/2001/XInclude" href="docs/crApp-docu.xml"/>
    </body>
    <back>
      <div>
        <head>Specifications of the crApp schema</head>
        <schemaSpec ident="crApp" xml:lang="en" start="crApp setting" predeclare="true" ns="http://baumann-digital.de/ns/crApp">
        	
        	<!-- crapp modules -->
          <moduleSpec ident="core" mode="add">
          	<gloss xml:lang="en" versionDate="2023-03-19">Core Module</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Modul: core</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Module for attribut classes, macros, datatypes and constraints.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Modul für Attributklassen, Makros, Datentypen und Einschränkungsregeln (contsraints).</desc>
          </moduleSpec>
          <moduleSpec ident="remark" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">Remark Module</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Modul: remark</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Module for remark-like entities.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Modul für Entitäten zu Anmerkungen.</desc>
        	</moduleSpec>
          <moduleSpec ident="setting" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">Setting Module</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Modul: setting</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Module for setting-like entities.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Modul für Entitäten zur Grundkonstellation.</desc>
          </moduleSpec>
        	
          <!-- mei modules -->
          <moduleRef key="MEI" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.analytical" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.cmn" source="../../submodules/music-encoding/source/mei-source.xml" include="arpeg attacca beam beamSpan beatRpt bend bracketSpan breath bTrem fermata fTrem gliss graceGrp hairpin halfmRpt harpPedal lv measure meterSig meterSigGrp mNum mRest mRpt mRpt2 mSpace multiRest multiRpt octave oLayer ossia oStaff pedal reh slur tie tuplet tupletSpan"/>
          <moduleRef key="MEI.cmnOrnaments" source="../../submodules/music-encoding/source/mei-source.xml" include="trill"/>
          <moduleRef key="MEI.critapp" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.edittrans" source="../../submodules/music-encoding/source/mei-source.xml" include="abbr add choice corr damage del expan gap handShift orig reg sic subst supplied unclear"/>
          <moduleRef key="MEI.frbr" source="../../submodules/music-encoding/source/mei-source.xml" include="manifestation manifestationList"/>
          <moduleRef key="MEI.gestural" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.header" source="../../submodules/music-encoding/source/mei-source.xml" include="key meter handList hand"/>
          <moduleRef key="MEI.ptrref" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.shared" source="../../submodules/music-encoding/source/mei-source.xml" include="accid artic barLine caesura chord clef dot dir dynam ending expansion genre group grpSym keyAccid keySig label labelAbbr layer lb lg name note num ornam pad pb rest rend scoreDef section space staff staffDef staffGrp sb syl tempo"/>
          <moduleRef key="MEI.text" source="../../submodules/music-encoding/source/mei-source.xml" include="q quote seg"/>
          <moduleRef key="MEI.usersymbols" source="../../submodules/music-encoding/source/mei-source.xml" include="anchoredText"/>
          <moduleRef key="MEI.verse" source="../../submodules/music-encoding/source/mei-source.xml"/>
          <moduleRef key="MEI.visual" source="../../submodules/music-encoding/source/mei-source.xml"/>
        	
        	<!-- crapp macros -->
        	<macroSpec ident="macro.annot.content" module="core" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">Supported MEI elements</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">unterstütze MEI-Elemente</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Supported MEI elements as content of annotations.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Unterstützte MEI-Elemente in den Anmerkungen.</desc>
        		<content>
        			<sequence preserveOrder="false" minOccurs="1" maxOccurs="unbounded">
        				<textNode/>
        				<elementRef key="accid" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="add" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="anchoredText" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="app" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="artic" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="barLine" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="beam" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="bTrem" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="caesura" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="chord" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="clef" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="corr" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="del" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="dir" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="dot" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="dynam" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="ending" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="fermata" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="fTrem" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="hairpin" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="key" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="keyAccid" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="keySig" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="lb" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="meterSig" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="mRpt" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="mRest" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="mSpace" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="name" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="note" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="num" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="octave" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="ornam" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="pb" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="ptr" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="q" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="quote" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="rest" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="sb" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="section" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="seg" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="slur" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="space" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="subst" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="syl" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="tempo" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="tie" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="trill" minOccurs="0" maxOccurs="unbounded"/>
        				<elementRef key="tuplet" minOccurs="0" maxOccurs="unbounded"/>
        			</sequence>
        		</content>
        	</macroSpec>
        	<macroSpec ident="macro.list.lang" module="core" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">Supported languages</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">unterstütze Sprachen</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Supported languages at crApp-WebApp.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Unterstützte Sprachen in der crApp-WebApp.</desc>
            <content>
              <valList mode="add" type="closed">
                <valItem ident="de">
                  <gloss xml:lang="de" versionDate="2023-01-02">deutsch</gloss>
                  <gloss xml:lang="en" versionDate="2023-01-02">german</gloss>
                </valItem>
                <valItem ident="en">
                  <gloss xml:lang="de" versionDate="2023-01-02">englisch</gloss>
                  <gloss xml:lang="en" versionDate="2023-01-02">english</gloss>
                </valItem>
              </valList>
            </content>
          </macroSpec>
        	
        	<!-- mei macros -->
        	<macroSpec ident="data.ARTICULATION" module="MEI" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Datatype ARTICULATION</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Datentyp ARTICULATION</gloss>
            <content>
              <valList type="closed" mode="change">
                <valItem ident="arco" mode="add">
                  <desc xml:lang="en">playing with bow</desc>
                </valItem>
                <valItem ident="pizz" mode="add">
                  <desc xml:lang="en">plucking (strings)</desc>
                </valItem>
                <valItem ident="acc">
                  <desc xml:lang="en">Accent (Unicode 1D17B).</desc>
                </valItem>
                <valItem ident="acc-inv">
                  <desc xml:lang="en">Inverted accent.</desc>
                </valItem>
                <valItem ident="stacc">
                  <desc xml:lang="en">Staccato (Unicode 1D17C).</desc>
                </valItem>
                <valItem ident="ten">
                  <desc xml:lang="en">Tenuto (Unicode 1D17D).</desc>
                </valItem>
                <valItem ident="stacciss">
                  <desc xml:lang="en">Staccatissimo (Unicode 1D17E).</desc>
                </valItem>
                <valItem ident="marc">
                  <desc xml:lang="en">Marcato (Unicode 1D17F).</desc>
                </valItem>
                <valItem ident="spicc">
                  <desc xml:lang="en">Spiccato.</desc>
                </valItem>
                <valItem ident="dnbow">
                  <desc xml:lang="en">Down bow (Unicode 1D1AA).</desc>
                </valItem>
                <valItem ident="upbow">
                  <desc xml:lang="en">Up bow (Unicode 1D1AB).</desc>
                </valItem>
                <valItem ident="damp">
                  <desc xml:lang="en">Stop harp string from sounding (Unicode 1D1B4).</desc>
                </valItem>
                <valItem ident="open">
                  <desc xml:lang="en">Full (as opposed to stopped) tone.</desc>
                </valItem>
                <valItem ident="stop">
                  <desc xml:lang="en">"muffled" tone.</desc>
                </valItem>
              </valList>
            </content>
          </macroSpec>
        	<macroSpec ident="data.BEAT.extention" module="MEI" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">Datatype BEAT (extention)</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Datentyp BEAT (Erweiterung)</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Combining data.BEAT, data.MEASUREBEAT, data.MEASUREBEATOFFSET; The values can be absolut ([measure]+[count] or [measure]) or relative (+/-[measure]+[count]). If the value is recorded in relative mode the use of +/- has to be used to differ from absolute values.</desc>
        		<desc xml:lang="en" versionDate="2023-03-19">Kombination aus data.BEAT, data.MEASUREBEAT, data.MEASUREBEATOFFSET; Die Werte können absolut ([Taktzahl]+[Zählzeit] oder [Taktzahl]) oder relativ (+/-[Taktzahl]+[Zählzeit]) angegeben werden. Falls die Werte im relativen Modus erfasst werden, ist die Verwendung von +/- obligatorisch, um die relativen von absoluten Werten unterscheiden zu können.</desc>
        		<content>
	        			<rng:data type="token">
	        				<rng:param name="pattern">(([0-9]+m\s*\+\s*)?[0-9]+(\.?[0-9]*)?)|((\+|-)?[0-9]+m\+[0-9]+(\.[0-9]*)?)|([0-9]+)</rng:param>
	        			</rng:data>
        		</content>
        	</macroSpec>
        	
        	<!-- crapp classes -->
        	<classSpec type="atts" ident="att.label" module="core">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class label</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse label</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Class for attributes used to label elements in any way.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Klasse für Attribute, die Elemente in irgendeiner Weise bezeichnen.</desc>
        		<attList>
        			<attDef ident="label">
        				<datatype>
        					<dataRef key="text"/>
        				</datatype>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec type="atts" ident="att.numbering" module="core">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class numbering</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse numbering</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Class for attributes used for numbering or counting.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Klasse für Attribute, die für Nummerierungen oder Zählungen verwendet werden.</desc>
        		<attList>
        			<attDef ident="num">
        				<gloss xml:lang="en" versionDate="2023-03-19">number</gloss>
        				<gloss xml:lang="de" versionDate="2023-03-19">Nummer</gloss>
        				<desc xml:lang="en" versionDate="2023-03-19">Attribute for numbering. The value must be an integer.</desc>
        				<desc xml:lang="de" versionDate="2023-03-19">Attribut für eine Nummerierung. Der Wert muss eine Ganzzahl (integer) sein.</desc>
        				<datatype>
        					<dataRef key="integer"/>
        				</datatype>
        			</attDef>
        			<attDef ident="sortNo">
        				<gloss xml:lang="en" versionDate="2023-03-19">sorting number</gloss>
        				<gloss xml:lang="de" versionDate="2023-03-19">Sortiernummer</gloss>
        				<desc xml:lang="en" versionDate="2023-03-19">Attribute for sorting purpose. The value must be an integer.</desc>
        				<desc xml:lang="de" versionDate="2023-03-19">Attribut für Sortierzwecke. Der Wert muss eine Ganzzahl (integer) sein.</desc>
        				<datatype>
        					<dataRef key="integer"/>
        				</datatype>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec type="atts" ident="att.target" module="core">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class target</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse target</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Attributes for defining an explicit target.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Klasse für Attribute, die ein definiertes Ziel angeben.</desc>
        		<attList>
        			<attDef ident="target">
        				<desc xml:lang="en" versionDate="2023-03-19">The value must be an URI.</desc>
        				<desc xml:lang="de" versionDate="2023-03-19">Der Wert muss vom Typ URI sein.</desc>
        				<datatype>
        					<dataRef key="URI"/>
        				</datatype>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec type="atts" ident="att.timing" module="core">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class timing</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse timing</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Attributes concerning timing.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Attribute, die das Timing betreffen.</desc>
        		<attList>
        			<attDef ident="measure" usage="req">
        				<desc xml:lang="en" versionDate="2023-03-19">An attribute for defining a measure as a time stamp. The value must be a positive integer.</desc>
        				<desc xml:lang="de" versionDate="2023-03-19">Attribut zur Erfassung einer Taktzahl als Zeitstempel. Der Wert muss eine positive Ganzzahl (integer) sein.</desc>
        				<datatype>
        					<dataRef name="nonNegativeInteger"/>
        				</datatype>
        			</attDef>
        			<attDef ident="count">
        				<desc xml:lang="en" versionDate="2023-03-19">An attribute for defining a count as a time stamp. The value must be a positive integer.</desc>
        				<desc xml:lang="de" versionDate="2023-03-19">Attribut zur Erfassung einer Zählzeit als Zeitstempel. Der Wert muss eine positive Ganzzahl (integer) sein.</desc>
        				<datatype>
        					<dataRef name="nonNegativeInteger"/>
        				</datatype>
        			</attDef>
        		</attList>
        	</classSpec>
        	
        	<!-- mei classes -->
        	<classSpec ident="att.classed" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class classed</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse classed</gloss>
        		<attList>
        			<attDef ident="class" usage="opt" mode="change">
<!--        				<desc xml:lang="en">Contains one or more URIs which denote classification terms that apply to the entity bearing this attribute.</desc>-->
        				<constraintSpec ident="check_classURI" scheme="schematron">
        					<constraint>
        						<sch:rule context="@class">
        							<sch:assert test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//*:class/@xml:id or matches($i, '^([a-z]+://|\.{1,2}/)')">The value in @class must either correspond to the @xml:id attribute of a class element or be an external URL.</sch:assert>
        						</sch:rule>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec ident="att.handIdent" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class handIdent</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse handIdent</gloss>
        		<attList>
        			<attDef ident="hand" usage="opt" mode="change">
        				<constraintSpec ident="check_handTarget" scheme="schematron">
        					<constraint>
        						<sch:rule context="@hand">
        							<sch:assert role="warning" test="not(normalize-space(.) eq '')">@hand attribute should have content.</sch:assert>
        							<sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//*:hand/@xml:id">Each value in @hand should correspond to the @xml:id attribute of a hand element.</sch:assert>
        						</sch:rule>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec ident="att.linking" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class linking</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse linking</gloss>
        		<attList>
        			<attDef ident="corresp" usage="opt" mode="change">
        				<desc xml:lang="en">Used to point to other elements that correspond to this one in a generic fashion.</desc>
        				<constraintSpec ident="check_correspTarget" scheme="schematron">
        					<constraint>
        						<sch:schema xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2">
        							<sch:ns uri="http://www.functx.com" prefix="functx"/>
        							<xsl:function name="functx:contains-any-of" as="xs:boolean">
        								<xsl:param name="arg" as="xs:string?"/>
        								<xsl:param name="searchStrings" as="xs:string*"/>
        								<xsl:sequence select="some $searchString in $searchStrings satisfies contains($arg,$searchString)"/>
        							</xsl:function>
        							<xsl:function name="functx:substring-before-if-contains" as="xs:string?">
        								<xsl:param name="arg" as="xs:string?"/>
        								<xsl:param name="delim" as="xs:string"/>
        								<xsl:sequence select="if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg"/>
        							</xsl:function>
        							<sch:pattern id="checkCorrespPointers">
        								<sch:rule context="@corresp">
        									<sch:let name="measurePointers" value="//crapp:mdiv/concat('mdiv-',@no)"/>
        									<sch:assert role="error" test="not(normalize-space(.) eq '')">@corresp attribute should have content.</sch:assert>
        									<sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies (substring($i,2)=//crapp:*/@xml:id or matches(substring($i,2),'mdiv\-\d+(_m\-\d+)?(_c-\d\d?)?$'))">Each value in @corresp should correspond to the @xml:id attribute of an element.</sch:assert>
        								</sch:rule>
        							</sch:pattern>
        						</sch:schema>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        			<attDef ident="sameas" usage="opt" mode="change">
        				<desc xml:lang="en">Used to point to other elements that correspond to this one in a generic fashion.</desc>
        				<constraintSpec ident="check_correspTarget" scheme="schematron">
        					<constraint>
        						<sch:schema xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2">
        							<sch:ns uri="http://www.functx.com" prefix="functx"/>
        							<!--<xsl:function name="functx:contains-any-of" as="xs:boolean">
            						<xsl:param name="arg" as="xs:string?"/>
            						<xsl:param name="searchStrings" as="xs:string*"/>
            						<xsl:sequence select="some $searchString in $searchStrings satisfies contains($arg,$searchString)"/>
            					</xsl:function>
            					<xsl:function name="functx:substring-before-if-contains" as="xs:string?">
            						<xsl:param name="arg" as="xs:string?"/>
            						<xsl:param name="delim" as="xs:string"/>
            						<xsl:sequence select="if (contains($arg,$delim)) then substring-before($arg,$delim) else $arg"/>
            					</xsl:function>-->
        							<sch:pattern id="checkSameasPointers">
        								<sch:rule context="@sameas">
        									<sch:let name="measurePointers" value="//crapp:mdiv/concat('mdiv-',@no)"/>
        									<sch:assert role="error" test="not(normalize-space(.) eq '')">@corresp attribute should have content.</sch:assert>
        									<sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies (substring($i,2)=//crapp:*/@xml:id or matches(substring($i,2),'mdiv\-\d+(_m\-\d+)?(_c-\d\d?)?$'))">Each value in @corresp should correspond to the @xml:id attribute of an element.</sch:assert>
        								</sch:rule>
        							</sch:pattern>
        						</sch:schema>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec ident="att.partIdent" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class partIdent</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse partIdent</gloss>
        		<attList>
        			<attDef ident="part" usage="opt" mode="change">
        				<desc xml:lang="en">Indicates the part in which the current feature should appear. Use '%all' when the feature should occur in every part.</desc>
        				<datatype maxOccurs="unbounded">
        					<rng:data type="token">
        						<rng:param name="pattern">(%all|#[\i][\c]+)</rng:param>
        					</rng:data>
        				</datatype>        				<constraintSpec ident="check_partTarget" scheme="schematron" mode="add">
        					<constraint>
        						<sch:rule context="@part">
        							<sch:assert role="warning" test="not(normalize-space(.) eq '')">@part attribute should have content.</sch:assert>
        							<sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=(//crapp:part/@xml:id,//crapp:partGrp/@xml:id) or $i='%all'">Each value in @part should correspond to the @xml:id attribute of a part or partGrp element.</sch:assert>
        						</sch:rule>
        					</constraint>
        				</constraintSpec>
        				<constraintSpec ident="check_part_attr_all" scheme="schematron" mode="add">
        					<constraint>
        						<sch:rule context="@part[some $i in tokenize(., '\s+') satisfies (matches($i, '^%all$'))]">
        							<sch:assert test="count(tokenize(., '\s+')) = 1">'%all' cannot be mixed with other values.</sch:assert>
        						</sch:rule>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec ident="att.responsibility" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class responsibility</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse responsibility</gloss>
        		<attList>
        			<attDef ident="resp" usage="opt" mode="change">
        				<desc xml:lang="en">Indicates the agent(s) responsible for some aspect of the text’s transcription, editing, or encoding. Its value must point to one or more identifiers declared in the document header.</desc>
        				<datatype maxOccurs="unbounded">
        					<rng:ref name="data.URI"/>
        				</datatype>
        				<constraintSpec ident="check_respTarget" scheme="schematron">
        					<constraint>
        						<sch:rule context="@resp">
        							<sch:assert role="warning" test="not(normalize-space(.) eq '')">@resp attribute should have content.</sch:assert>
        							<sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//crapp:classGrp [@label='editor']/crapp:class/@xml:id">The value in @resp should correspond to the @xml:id attribute of a class element within the classGrp with @label='editor'.</sch:assert>
        						</sch:rule>
        					</constraint>
        				</constraintSpec>
        			</attDef>
        		</attList>
        	</classSpec>
        	<classSpec ident="att.source" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class source</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse source</gloss>
            <attList>
              <attDef ident="source" usage="opt" mode="change">
                <desc xml:lang="en">Contains a list of one or more pointers indicating the sources which attest to a given reading. Each value should correspond to the ID of a <gi scheme="MEI">manifestation</gi> element.</desc>
                <constraintSpec ident="check_sourceTarget" scheme="schematron">
                  <constraint>
                    <sch:rule context="@source">
                      <sch:assert role="warning" test="not(normalize-space(.) eq '')">@source attribute should have content.</sch:assert>
                      <sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=(//crapp:manifestation/@xml:id,//crapp:edition/@xml:id)">Each value in @source should correspond to the @xml:id attribute of a source or manifestation element.</sch:assert>
                    </sch:rule>
                  </constraint>
                </constraintSpec>
              </attDef>
            </attList>
          </classSpec>
          <classSpec ident="att.startEndId" module="MEI.shared" type="atts" mode="change">
          	<gloss xml:lang="en" versionDate="2023-03-19">Attribute class startEndId</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse startEndId</gloss>
            <classes>
              <memberOf key="att.startId"/>
            </classes>
            <attList>
              <attDef ident="endid" usage="opt" mode="change">
                <constraintSpec ident="check_endidTarget" scheme="schematron">
                  <constraint>
                    <sch:rule context="@endid">
                      <sch:assert role="warning" test="not(normalize-space(.) eq '')">@endid attribute should have content.</sch:assert>
                      <sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//crapp:*/@xml:id">The value in @endid should correspond to the @xml:id attribute of an element.</sch:assert>
                    </sch:rule>
                  </constraint>
                </constraintSpec>
              </attDef>
            </attList>
          </classSpec>
          <classSpec ident="att.startId" module="MEI.shared" type="atts" mode="change">
          	<gloss xml:lang="en" versionDate="2023-03-19">Attribute class startId</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse startId</gloss>
            <attList>
              <attDef ident="startid" usage="opt" mode="change">
                <desc xml:lang="en">Holds a reference to the first element in a sequence of events to which the feature applies.</desc>
                <constraintSpec ident="check_startidTarget" scheme="schematron">
                  <constraint>
                    <sch:rule context="@startid">
                      <sch:assert role="warning" test="not(normalize-space(.) eq '')">@startid attribute should have content.</sch:assert>
                      <sch:assert role="warning" test="every $i in tokenize(., '\s+') satisfies substring($i,2)=//crapp:*/@xml:id">The value in @startid should correspond to the @xml:id attribute of an element.</sch:assert>
                    </sch:rule>
                  </constraint>
                </constraintSpec>
              </attDef>
            </attList>
          </classSpec>
        	<classSpec ident="att.timestamp.log" module="MEI.shared" type="atts" mode="change">
        		<gloss xml:lang="en" versionDate="2023-03-19">Attribute class timestamp.log</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Attributklasse timestamp.log</gloss>
        		<attList>
        			<attDef ident="tstamp" usage="opt" mode="change">
        				<gloss versionDate="2023-02-10" xml:lang="en">time stamp</gloss>
        				<desc xml:lang="en">Encodes the onset time in terms of musical time,
        					<abbr>i.e.</abbr>, beats[.fractional beat part], as expressed in the written time signature.</desc>
        				<datatype>
        					<dataRef key="data.BEAT.extention"/>
        				</datatype>
        			</attDef>
        		</attList>
        	</classSpec>
        	
        	<!-- crapp constraints -->
        	<constraintSpec ident="set_ns" module="core" scheme="schematron" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">set namespace</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">set namespace</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Declaration of namespaces for schematron.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Namensraumdeklarationen für schematron.</desc>
            <constraint>
              <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" uri="http://baumann-digital.de/ns/crApp"/>
              <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="crapp" uri="http://baumann-digital.de/ns/crApp"/>
              <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
              <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
            </constraint>
          </constraintSpec>
        	<constraintSpec ident="setting-values-check" module="core" scheme="schematron" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">value check for setting</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Werteüberprüfung für Setting</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Checks if the used values are defined somwhere in the <gi>setting</gi> element.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Prüft, ob die verwendeten Werte innerhalb des <gi>setting</gi> Elemetns definiert sind.</desc>
            <constraint>
              <sch:schema xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2">
                <sch:ns uri="http://baumann-digital.de/ns/crApp" prefix="crapp"/>
                <xsl:function name="functx:is-value-in-sequence" as="xs:boolean">
                  <xsl:param name="value" as="xs:anyAtomicType?"/>
                  <xsl:param name="seq" as="xs:anyAtomicType*"/>
                  <xsl:sequence select="$value = $seq"/>
                </xsl:function>
                <xsl:function name="crapp:checkValues">
                  <xsl:param name="elem" as="node()"/>
                  <xsl:param name="attName" as="xs:string"/>
                  <xsl:variable name="lang" select="$elem/ancestor::crapp:setting/crapp:language/@codedval"/>
                  <xsl:variable name="elemName" select="local-name($elem)"/>
                  <xsl:variable name="elemText" select="$elem/text()"/>
                  <xsl:variable name="setVals" select="$elem/ancestor::crapp:crApp//crapp:setting//node()[local-name()=$elemName]"/>
                  <xsl:value-of select="functx:is-value-in-sequence($elemText, if($setVals/attribute::node()[local-name()=$attName])then($setVals/attribute::node()[local-name()=$attName]) else($setVals/crapp:label[@xml:lang=$lang]/text()))"/>
                </xsl:function>
                <xsl:function name="crapp:valuesAllowed">
                  <xsl:param name="elem" as="node()"/>
                  <xsl:param name="attName" as="xs:string"/>
                  <xsl:variable name="lang" select="$elem/ancestor::crapp:setting/crapp:language/@codedval"/>
                  <xsl:variable name="elemName" select="local-name($elem)"/>
                  <xsl:variable name="elemText" select="$elem/text()"/>
                  <xsl:variable name="setVals" select="$elem/ancestor::crapp:crApp//crapp:setting//node()[local-name()=$elemName]"/>
                  <xsl:for-each select="$setVals">
                    <xsl:value-of select="if(attribute::node()[local-name()=$attName]) then(attribute::node()[local-name()=$attName]/string()) else(text())"/>
                  </xsl:for-each>
                </xsl:function>
                <xsl:function name="crapp:valuesAllowedJoined">
                  <xsl:param name="elem" as="node()"/>
                  <xsl:param name="attName" as="xs:string"/>
                  <xsl:value-of select="string-join(crapp:valuesAllowed($elem, $attName), ', ')"/>
                </xsl:function>
                <sch:pattern abstract="true" id="checkValues">
                  <sch:rule context="crapp:remark//node()[local-name()='$elementName']">
                    <sch:assert test="exists(ancestor::crapp:crApp/crapp:setting//node()[local-name()='$elementName'])" role="fatal">No setting for <sch:value-of select="local-name(.)"/> defined. Please define the setting before use.</sch:assert>
                    <sch:report test="exists(ancestor::crapp:crApp/crapp:setting//node()[local-name()='$elementName']) and crapp:checkValues(., '$attrStr') = false()" role="error">The value <sch:value-of select="."/> is not allowed here. Please use one of these: <sch:value-of select="crapp:valuesAllowedJoined(., '$attrStr')"/>.</sch:report>
                  </sch:rule>
                </sch:pattern>
              </sch:schema>
            </constraint>
          </constraintSpec>
        	<constraintSpec ident="check-part-combination" module="core" scheme="schematron" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">value check for part combination</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Werteüberprüfung für Stimmenkombinationen</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Checks if the named parts at a remark are redundant, e.g., if the part groupis called also.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Prüft, ob die genannten Stimmen in einer Anmerkung redundant sind, z.B. ob die Stimmengruppe ebenfalls genannt wird.</desc>
            <constraint>
              <sch:rule context="crapp:remark//crapp:part">
                <sch:let name="partVal" value="./text()"/>
                <sch:let name="partGrpVals" value="ancestor::crapp:remark//crapp:partGrp/text()"/>
                <sch:report test=".[ancestor::crapp:crApp/crapp:setting//crapp:part[@xml:id = $partVal]/ancestor::crapp:partGrp[@xml:id][@xml:id = ($partGrpVals)]]" role="warning"><sch:value-of select="$partVal"/> is part of <sch:value-of select="($partGrpVals)[last()]"/>. A second call might be redundant.</sch:report>
              </sch:rule>
            </constraint>
          </constraintSpec>
        	<constraintSpec ident="check-partGrp-combination" module="core" scheme="schematron" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">value check for part group combination</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Werteüberprüfung für Stimmengruppenkombinationen</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Checks if the named part groups at a remark are redundant, e.g., if the parent or ancestor group is called also.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Prüft, ob die genannten Stimmengruppen in einer Anmerkung redundant sind, z.B. ob das Elternelement oder ein anderer Vorfahre ebenso genannt wird.</desc>
            <constraint>
              <sch:rule context="crapp:remark//crapp:partGrp">
                <sch:let name="partGrpVal" value="./text()"/>
                <sch:let name="partGrpVals" value="ancestor::crapp:remark//crapp:partGrp[not(text() = $partGrpVal)]/text()"/>
                <sch:report test="ancestor::crapp:crApp/crapp:setting//crapp:partGrp[@xml:id = $partGrpVal]/ancestor::crapp:partGrp[@xml:id][@xml:id = ($partGrpVals)]" role="warning"><sch:value-of select="$partGrpVal"/> is part of <sch:value-of select="($partGrpVals)[last()]"/>. A second call might be redundant.</sch:report>
              </sch:rule>
            </constraint>
          </constraintSpec>
        	<constraintSpec ident="check-measure-count-value" module="core" scheme="schematron" mode="add">
        		<gloss xml:lang="en" versionDate="2023-03-19">value check for measure count</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Werteüberprüfung für Zählzeit</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Checks if the given count exists in the meter.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Prüft, ob die genannte Zählzeit in der Taktart vorkommt.</desc>
        		<constraint>
              <sch:rule context="crapp:measure[@count]|crapp:range[@count]">
                <sch:let name="meterCount" value="./ancestor::crapp:crApp/crapp:setting//crapp:meter/@count"/>
                <sch:let name="meterUnit" value="./ancestor::crapp:crApp/crapp:setting//crapp:meter/@unit"/>
                <sch:report role="fatal" test="./@count/number() gt $meterCount/number()">Unavailable count! The meter is <sch:value-of select="$meterCount"/>/<sch:value-of select="$meterUnit"/>.</sch:report>
                  </sch:rule>
            </constraint>
          </constraintSpec>
          
        	<!-- crapp elements -->
        	<elementSpec ident="annot" module="remark" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">annotation</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Annotation</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Bears an annotation to the critical remark</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Enthält eine Annotation zur kritischen Anmerkung.</desc>
        		<content>
              <macroRef key="macro.annot.content"/>
            </content>
            <attList>
              <attDef ident="type" mode="add" usage="opt">
                <desc xml:lang="en" versionDate="2022-01-03">Classification</desc>
                <desc xml:lang="de" versionDate="2022-01-03">Klassifikation</desc>
                <valList type="closed" mode="add">
                  <valItem ident="intern">
                    <gloss xml:lang="en" versionDate="2022-01-03">internal</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">intern</gloss>
                  </valItem>
                  <valItem ident="no">
                    <gloss xml:lang="en" versionDate="2022-01-03">no available</gloss>
                    <desc xml:lang="en" versionDate="2022-01-03">The content given in the annotation as not available in the source</desc>
                    <gloss xml:lang="de" versionDate="2022-01-03">nicht vorhanden</gloss>
                    <desc xml:lang="de" versionDate="2022-01-03">Der Inhalt der Anmerkung als in der Quelle nicht vorhanden</desc>
                  </valItem>
                  <valItem ident="ediDel">
                    <gloss xml:lang="en" versionDate="2022-01-03">editorial deletion</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">Tilgung (Hg.)</gloss>
                  </valItem>
                  <valItem ident="ediAdd">
                    <gloss xml:lang="en" versionDate="2022-01-03">editorial addition</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">Hinzufügung (Hg.)</gloss>
                  </valItem>
                  <valItem ident="ediInt">
                    <gloss xml:lang="en" versionDate="2022-01-03">editorial intervention</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">Eingriff (Hg.)</gloss>
                  </valItem>
                  <valItem ident="finding">
                    <gloss xml:lang="en" versionDate="2022-01-08">finding</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-08">Befund</gloss>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          <elementSpec ident="annots" module="remark" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">annotations</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Annotationen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>annot</gi> elements.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>annot</gi> Elemente.</desc>
            <content>
              <elementRef key="annot" minOccurs="1" maxOccurs="unbounded"/>
              <!-- source="../../MusicEncoding/music-encoding/source/modules/MEI.shared.xml" -->
            </content>
          </elementSpec>
        	<elementSpec ident="class" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">class</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Klassifizierung</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Defines a class or category to be used for classifying.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definiert eine Klasse oder Kategorie, die zur Klassifizerung verwendet wird.</desc>
            <classes>
              <memberOf key="att.canonical"/>
              <memberOf key="att.id"/>
            </classes>
            <content>
              <alternate>
                <elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="check-values-source" scheme="schematron">
              <constraint>
                <sch:pattern is-a="checkValues">
                  <sch:param name="elementName" value="class"/>
                  <sch:param name="attrStr" value="id"/>
                </sch:pattern>
              </constraint>
            </constraintSpec>
          </elementSpec>
          <elementSpec ident="classGrp" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">class Group</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Klassifizierungsgruppe</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for class definitions.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für Klassendefinitionen.</desc>
            <classes>
              <memberOf key="att.label"/>
            </classes>
            <content>
              <elementRef key="class" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
          <elementSpec ident="classifications" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">classifications</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Klassifizierungen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container to organize classifications.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container um Klassifizierungen zu organisieren.</desc>
            <content>
              <elementRef key="classGrp" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
        	<elementSpec ident="crApp" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">critical apparatus</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Kritischer Apparat</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">The root element of the crApp schema.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Das Wurzelelement des crApp-Schemas.</desc>
        		<classes>
        			<memberOf key="att.id"/>
        		</classes>
        		<content>
        			<elementRef key="setting" minOccurs="1" maxOccurs="1"/>
        			<elementRef key="remarks" minOccurs="1" maxOccurs="unbounded"/>
        		</content>
        	</elementSpec>
        	<elementSpec ident="edition" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">edition</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Edition</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Defines an edition or a part of an edition.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definiert eine Edition oder einen Teil einer Edition.</desc>
        		<classes>
              <memberOf key="att.id"/>
              <memberOf key="att.numbering"/>
              <memberOf key="att.target"/>
            </classes>
            <content>
              <alternate>
                <elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="check-values-edition" scheme="schematron">
              <constraint>
                <sch:pattern is-a="checkValues">
                  <sch:param name="elementName" value="edition"/>
                  <sch:param name="attrStr" value="id"/>
                </sch:pattern>
              </constraint>
            </constraintSpec>
          </elementSpec>
        	<elementSpec ident="editionList" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">edition list</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Liste der Edition</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>edition</gi> Elements.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>edition</gi> Elemente.</desc>
        		<content>
        				<elementRef key="edition" minOccurs="1" maxOccurs="unbounded"/>
        		</content>
        	</elementSpec>
        	
        	<elementSpec ident="language" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">language</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Sprache</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines the main language used.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert die verwendete Hauptsprache.</desc>
            <classes>
              <memberOf key="att.canonical"/>
            </classes>
            <content>
              <empty/>
            </content>
            <attList>
              <attDef ident="codedval" mode="change">
                <datatype>
                  <dataRef key="macro.list.lang"/>
                </datatype>
              </attDef>
            </attList>
          </elementSpec>
          <elementSpec ident="mdiv" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">musical division</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Musikalsicher Abschnitt</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines a musical devision of a work</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert einen musikalischen Abschnitt eines Werkes.</desc>
          	<classes>
              <memberOf key="att.numbering"/>
            </classes>
            <content>
              <alternate>
                <elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="check-values-mdiv" scheme="schematron">
              <constraint>
                <sch:pattern is-a="checkValues">
                  <sch:param name="elementName" value="mdiv"/>
                  <sch:param name="attrStr" value="num"/>
                </sch:pattern>
              </constraint>
            </constraintSpec>
          </elementSpec>
          <elementSpec ident="mdivs" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">musical divisions</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Musikalsiche Abschnitte</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>mdiv</gi> elements.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>mdiv</gi> Elemente.</desc>
          	<content>
              <elementRef key="mdiv" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
          <elementSpec ident="measures" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">measures</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Takte</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Records the Count of measures of a work.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Erfasst die Anzahl der Takte eines Werkes.</desc>
            <content>
              <empty/>
            </content>
            <attList>
              <attDef ident="total" usage="req">
                <datatype>
                  <dataRef name="nonNegativeInteger"/>
                </datatype>
              </attDef>
              <attDef ident="upbeat" usage="req">
                <valList mode="add" type="closed">
                  <valItem ident="true"/>
                  <valItem ident="false"/>
                </valList>
              </attDef>
              <attDef ident="startNo" usage="req">
                <datatype>
                  <dataRef name="nonNegativeInteger"/>
                </datatype>
              </attDef>
            </attList>
          </elementSpec>
          <elementSpec ident="occurance" module="remark" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">occurance</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Vorkommen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines a place in the musical structure, represented by a position or range.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert einen Ort in der musikalischen Struktur, repräsentiert durhc eine Position oder einen Bereich.</desc>
          	<content>
              <alternate>
                <elementRef key="position" minOccurs="1" maxOccurs="1"/>
                <sequence>
                  <elementRef key="range"/>
                  <elementRef key="range"/>
                </sequence>
              </alternate>
            </content>
          </elementSpec>
          <elementSpec ident="occurances" module="remark" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">occurances</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Vorkommen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>occurance</gi> elements.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>occurance</gi> Elemente.</desc>
          	<content>
              <elementRef key="occurance" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
          <elementSpec ident="part" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">part</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Stimme</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines an instrumental or vocal part of the work.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert eine Instrumental- oder Vokalstimme eines Werkes.</desc>
            <classes>
              <memberOf key="att.canonical"/>
              <memberOf key="att.id"/>
            </classes>
            <content>
              <alternate>
                <sequence preserveOrder="true" maxOccurs="1">
                  <elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
                  <elementRef key="part" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="check-values-part" scheme="schematron">
              <constraint>
                <sch:pattern is-a="checkValues">
                  <sch:param name="elementName" value="part"/>
                  <sch:param name="attrStr" value="id"/>
                </sch:pattern>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="part-in-part-attr-type-requiring" scheme="schematron">
              <constraint>
                <sch:rule context="crapp:part">
                  <sch:report test=".[parent::crapp:part] and not(@type)" role="error">If part is child of part a @type is required.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="part-sys-in-sysGrp-requiring" scheme="schematron">
              <constraint>
                <sch:rule context="crapp:part[@type='sysGrp']">
                  <sch:assert test="crapp:part[@type='sys']" role="warning">The part is defined as a system group but does not contain a system.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="type" mode="add" usage="opt">
                <desc xml:lang="en" versionDate="2022-01-03">Classification</desc>
                <desc xml:lang="de" versionDate="2022-01-03">Klassifikation</desc>
                <valList type="closed" mode="add">
                  <valItem ident="sysGrp">
                    <gloss xml:lang="en" versionDate="2022-01-03">system group</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">Systemgruppe</gloss>
                  </valItem>
                  <valItem ident="sys">
                    <gloss xml:lang="en" versionDate="2022-01-03">system</gloss>
                    <gloss xml:lang="de" versionDate="2022-01-03">System</gloss>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          <elementSpec ident="partGrp" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">part group</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Stimmgruppe</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines a part group.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert eine Stimmgruppe.</desc>
          	<classes>
              <memberOf key="att.canonical"/>
              <memberOf key="att.id"/>
            </classes>
            <content>
              <alternate>
                <sequence preserveOrder="true" maxOccurs="1">
                  <elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
                  <sequence preserveOrder="false" maxOccurs="unbounded">
                    <elementRef key="partGrp" minOccurs="0" maxOccurs="unbounded"/>
                    <elementRef key="part" minOccurs="0" maxOccurs="unbounded"/>
                  </sequence>
                </sequence>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="check-values-partGrp" scheme="schematron">
              <constraint>
                <sch:pattern is-a="checkValues">
                  <sch:param name="elementName" value="partGrp"/>
                  <sch:param name="attrStr" value="id"/>
                </sch:pattern>
              </constraint>
            </constraintSpec>
          </elementSpec>
          <elementSpec ident="parts" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">parts</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Stimmen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>partGrp</gi> and <gi>part</gi> elements.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>partGrp</gi> und <gi>part</gi> Elemente.</desc>
            <content>
              <alternate>
                <sequence preserveOrder="false" maxOccurs="unbounded">
                  <elementRef key="partGrp" minOccurs="0" maxOccurs="unbounded"/>
                  <elementRef key="part" minOccurs="0" maxOccurs="unbounded"/>
                </sequence>
                <textNode/>
              </alternate>
            </content>
            <constraintSpec ident="setting-values-check" module="core" scheme="schematron">
              <desc xml:lang="en" versionDate="2022-04-01">This constraint checks if the called values are defined somewhere in the <gi>setting</gi> element.</desc>
              <constraint>
                <sch:rule context="crapp:parts[not(crapp:*)]">
                  <sch:assert test="text() = ('all','none')">If no part is given the value 'all' or 'none' is required.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>
          <elementSpec ident="position" module="remark" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">measure position</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Taktposition</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Defines a position in the metrical structure.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Definiert eine Posiiton in der metrischen Struktur.</desc>
          	<classes>
              <memberOf key="att.timing"/>
            </classes>
          </elementSpec>
        	<elementSpec ident="range" module="remark" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">measure range</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Taktbereich</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Defines a range in the metrical structure.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definiert einen Bereich in der metrischen Struktur.</desc>
        		<classes>
              <memberOf key="att.timing"/>
            </classes>
            <constraintSpec ident="range-type-vals" scheme="schematron">
              <constraint>
                <sch:pattern>
                  <sch:rule context="crapp:range">
                    <sch:assert test="parent::node()/crapp:range[1]/@type='start'">The value of @type in the first range must be 'start'</sch:assert>
                    <sch:assert test="parent::node()/crapp:range[2]/@type='end'">The value of @type in the second range must be 'stop'</sch:assert>
                  </sch:rule>
                </sch:pattern>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="type" usage="req">
                <valList type="closed">
                  <valItem ident="start">
                    <gloss xml:lang="en">starting point</gloss>
                    <desc xml:lang="en" versionDate="2022-04-01">The location where the range of the occurance starts.</desc>
                  </valItem>
                  <valItem ident="end">
                    <gloss xml:lang="en">ending point</gloss>
                    <desc xml:lang="en" versionDate="2022-04-01">The location where the range of the occurance ends.</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
        	<elementSpec ident="relEditions" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">related editions</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Assoziierte Editionen</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Defines editions related to the critcal apparatus.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definiert Editionen, die im Zusammenhang zum kritischen Apparat stehen.</desc>
            <content>
              <elementRef key="edition" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
        	<elementSpec ident="relWork" module="setting" ns="http://baumann-digital.de/ns/crApp">
        		<desc xml:lang="en" versionDate="2022-04-01">A reference to a work this critical apparatus is made for.</desc>
        		<gloss xml:lang="en" versionDate="2023-03-19">related Work</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Assoziiertes Werk</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">Defines a work.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definiert ein Werk.</desc>
        		<classes>
        			<memberOf key="att.target"/>
        			<memberOf key="att.id"/>
        		</classes>
        		<content>
        			<elementRef key="measures"/>
        			<elementRef key="meter"/>
        		</content>
        	</elementSpec>
        	<elementSpec ident="remark" module="remark" ns="http://baumann-digital.de/ns/crApp">
        		<gloss xml:lang="en" versionDate="2023-03-19">critical remark</gloss>
        		<gloss xml:lang="de" versionDate="2023-03-19">Kritische Anmerkung</gloss>
        		<desc xml:lang="en" versionDate="2023-03-19">A critical remark relating to an edition.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Eine kritische Anermkung, die sich auf eine Edition bezieht.</desc>
            <classes>
              <memberOf key="att.id"/>
            </classes>
            <content>
              <elementRef key="class" minOccurs="1" maxOccurs="unbounded"/>
              <elementRef key="mdiv"/>
              <elementRef key="occurances" minOccurs="1" maxOccurs="1"/>
              <elementRef key="parts" maxOccurs="1"/>
              <!--            <elementRef key="layers" maxOccurs="1"/>-->
              <elementRef key="annots" minOccurs="1"/>
              <elementRef key="manifestationList" maxOccurs="1"/>
              <elementRef key="editionList" maxOccurs="1"/>
            </content>
            <attList>
              <attDef ident="type" usage="req">
                <valList type="closed">
                  <valItem ident="editorial">
                    <desc xml:lang="en" versionDate="2022-04-01">Editorial intervention</desc>
                    <desc xml:lang="de" versionDate="2022-04-01">Eingriff (Hg.)</desc>
                  </valItem>
                  <valItem ident="reading">
                    <desc xml:lang="en" versionDate="2022-04-01">Reading</desc>
                    <desc xml:lang="de" versionDate="2022-04-01">Lesart</desc>
                  </valItem>
                  <valItem ident="annotation">
                    <desc xml:lang="en" versionDate="2022-04-01">Annotation of the editor</desc>
                    <desc xml:lang="de" versionDate="2022-04-01">Anmerkung (Hg.)</desc>
                  </valItem>
                </valList>
              </attDef>
            </attList>
            <exemplum xml:lang="en">
              <egXML xmlns="http://www.tei-c.org/ns/Examples" source="crApp-template.xml">
                <remark>
                  <class>dynamic</class>
                  <mdiv>1</mdiv>
                  <occurances>
                    <occurance>
                      <position/>
                      <range type="start" measure="1" count="1"/>
                      <range type="stop" measure="2" count="3"/>
                    </occurance>
                  </occurances>
                  <parts>
                    <part>flute.i</part>
                    <partGrp>oboes</partGrp>
                  </parts>
                  <annots>
                    <annot><dynam>f</dynam></annot>
                  </annots>
                  <manifestationList>
                    <source>A-P3</source>
                  </manifestationList>
                  <editionList>
                    <edition>BauDi-P</edition>
                  </editionList>
                </remark>
              </egXML>
            </exemplum>
          </elementSpec>
          <elementSpec ident="remarks" module="remark" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">remarks</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Anmerkungen</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Container for <gi>remark</gi> elements.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Container für <gi>remark</gi> Elemente.</desc>
            <content>
              <elementRef key="remark" minOccurs="1" maxOccurs="unbounded"/>
            </content>
          </elementSpec>
          <elementSpec ident="setting" module="setting" ns="http://baumann-digital.de/ns/crApp">
          	<gloss xml:lang="en" versionDate="2023-03-19">setting</gloss>
          	<gloss xml:lang="de" versionDate="2023-03-19">Grundkonstellation</gloss>
          	<desc xml:lang="en" versionDate="2023-03-19">Records the setting of the described work.</desc>
          	<desc xml:lang="de" versionDate="2023-03-19">Erfasst die Grundkonstellation des beschriebenen Werkes.</desc>
            <classes>
              <memberOf key="att.basic" mode="add"/>
            </classes>
            <content>
              <elementRef key="language"/>
              <elementRef key="mdivs"/>
              <elementRef key="parts"/>
              <elementRef key="relWork"/>
              <elementRef key="manifestationList"/>
              <elementRef key="relEditions"/>
              <elementRef key="classifications"/>
            	<elementRef key="handList"/>
            </content>
          </elementSpec>
          
        	<!-- mei elements -->
        	<elementSpec ident="dir" module="MEI.shared" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<content>
        			<rng:zeroOrMore>
        				<rng:choice>
        					<rng:text/>
        					<rng:ref name="model.textPhraseLike.limited"/>
        					<rng:ref name="model.graphicPrimitiveLike"/>
        					<rng:ref name="model.editLike"/>
        					<rng:ref name="model.transcriptionLike"/>
        					<rng:ref name="lb"/>
        				</rng:choice>
        			</rng:zeroOrMore>
        		</content>
        	</elementSpec>
        	<elementSpec ident="pb" module="MEI.shared" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<content>
        			<empty/>
        		</content>
        	</elementSpec>
        	<elementSpec ident="ptr" module="MEI.ptrref" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<attList>
        			<attDef ident="type" mode="change">
        				<valList mode="add" type="closed">
        					<valItem ident="adapt">
        						<gloss xml:lang="en" versionDate="2022-01-07">adaption</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">angeglichen</gloss>
        					</valItem>
        					<valItem ident="compare">
        						<gloss xml:lang="en" versionDate="2022-01-07">compare</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">vergleiche</gloss>
        					</valItem>
        					<valItem ident="end">
        						<gloss xml:lang="en" versionDate="2022-01-07">ending point</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">Ende</gloss>
        					</valItem>
        					<valItem ident="start">
        						<gloss xml:lang="en" versionDate="2022-01-07">starting point</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">Beginn</gloss>
        					</valItem>
        					<valItem ident="follow">
        						<gloss xml:lang="en" versionDate="2022-01-07">following</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">folgt</gloss>
        					</valItem>
        					<valItem ident="see">
        						<gloss xml:lang="en" versionDate="2022-01-07">see also</gloss>
        						<gloss xml:lang="de" versionDate="2022-01-07">siehe auch</gloss>
        					</valItem>
        				</valList>
        			</attDef>
        		</attList>
        	</elementSpec>
        	<elementSpec ident="q" module="MEI.text" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<content>
        			<sequence preserveOrder="false" maxOccurs="unbounded">
        				<textNode/>
        				<classRef key="model.textPhraseLike" minOccurs="0"/>
        				<elementRef key="note" minOccurs="0"/>
        			</sequence>
        		</content>
        	</elementSpec>
        	<elementSpec ident="rdg" module="MEI.critapp" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<classes mode="change">
        			<memberOf key="att.evidence" mode="add"/>
        		</classes>
        	</elementSpec>
        	<elementSpec ident="tempo" module="MEI.shared" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<content>
        			<rng:zeroOrMore>
        				<rng:choice>
        					<rng:text/>
        					<rng:ref name="model.textPhraseLike.limited"/>
        					<rng:ref name="model.graphicPrimitiveLike"/>
        					<rng:ref name="model.editLike"/>
        					<rng:ref name="model.transcriptionLike"/>
        					<rng:ref name="note"/>
        				</rng:choice>
        			</rng:zeroOrMore>
        		</content>
        	</elementSpec>
        	<elementSpec ident="manifestationList" module="MEI.frbr" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<desc xml:lang="en" versionDate="2023-03-19">A container for <gi>manifestation</gi> elements.</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Ein Container für <gi>manifestation</gi> Elemente.</desc>
        		<content>
        			<elementRef key="manifestation" minOccurs="1" maxOccurs="unbounded"/>
        		</content>
        	</elementSpec>
        	<elementSpec ident="manifestation" module="MEI.frbr" mode="change" ns="http://baumann-digital.de/ns/crApp">
        		<desc xml:lang="en" versionDate="2023-03-19">Definition of a source</desc>
        		<desc xml:lang="de" versionDate="2023-03-19">Definition einer Quelle.</desc>
        		<classes>
        			<memberOf key="att.numbering"/>
        			<memberOf key="att.target"/>
        			<memberOf key="att.id"/>
        		</classes>
        		<content>
        			<alternate>
        				<elementRef key="label" minOccurs="1" maxOccurs="unbounded"/>
        				<textNode/>
        			</alternate>
        		</content>
        		<constraintSpec ident="check-values-source" scheme="schematron">
        			<constraint>
        				<sch:pattern is-a="checkValues">
        					<sch:param name="elementName" value="manifestation"/>
        					<sch:param name="attrStr" value="id"/>
        				</sch:pattern>
        			</constraint>
        		</constraintSpec>
        	</elementSpec>
        	
        </schemaSpec>
      </div>
    </back>
  </text>
</TEI>
